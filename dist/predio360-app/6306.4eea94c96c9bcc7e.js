"use strict";(self.webpackChunkpredio360_app=self.webpackChunkpredio360_app||[]).push([[6306],{96306:(b,y,e)=>{e.r(y),e.d(y,{default:()=>W});var E=e(15861),s=e(17626),p=e(59318),d=e(84792),P=(e(20383),e(62208)),M=e(99959),m=e(10699),O=e(21726),_=e(77712),D=(e(90912),e(85931),e(68653)),v=e(76898),C=e(2004),u=e(37053),h=e(44917),S=e(552),c=e(49286),R=e(6647),L=e(30346),f=e(99555),n=e(13812),a=e(10012),g=e(52068),j=e(13546),T=e(57213),U=e(88493);const I=["atom","xml"],A={base:a.Z,key:"type",typeMap:{"simple-line":g.Z},errorContext:"symbol"},B={base:a.Z,key:"type",typeMap:{"picture-marker":j.Z,"simple-marker":T.Z},errorContext:"symbol"},K={base:a.Z,key:"type",typeMap:{"simple-fill":U.Z},errorContext:"symbol"};let o=class extends((0,S.h)((0,L.Q)((0,c.q)((0,R.I)((0,f.M)((0,M.R)(h.Z))))))){constructor(...t){super(...t),this.description=null,this.fullExtent=null,this.legendEnabled=!0,this.lineSymbol=null,this.pointSymbol=null,this.polygonSymbol=null,this.operationalLayerType="GeoRSS",this.url=null,this.type="geo-rss"}normalizeCtorArgs(t,r){return"string"==typeof t?{url:t,...r}:t}readFeatureCollections(t,r){return r.featureCollection.layers.forEach(l=>{const i=l.layerDefinition.drawingInfo.renderer.symbol;i&&"esriSFS"===i.type&&i.outline?.style.includes("esriSFS")&&(i.outline.style="esriSLSSolid")}),r.featureCollection.layers}get hasPoints(){return this._hasGeometry("esriGeometryPoint")}get hasPolylines(){return this._hasGeometry("esriGeometryPolyline")}get hasPolygons(){return this._hasGeometry("esriGeometryPolygon")}get title(){const t=this._get("title");return t&&"defaults"!==this.originOf("title")?t:this.url?(0,O.vt)(this.url,I)||"GeoRSS":t||""}set title(t){this._set("title",t)}load(t){const r=(0,P.pC)(t)?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service","Feature Service","Feature Collection","Scene Service"]},t).catch(m.r9).then(()=>this._fetchService(r)).then(l=>{this.read(l,{origin:"service"})})),Promise.resolve(this)}hasDataChanged(){var t=this;return(0,E.Z)(function*(){const r=yield t._fetchService();return t.read(r,{origin:"service",ignoreDefaults:!0}),!0})()}_fetchService(t){var r=this;return(0,E.Z)(function*(){const l=r.spatialReference,{data:i}=yield(0,d.default)(p.Z.geoRSSServiceUrl,{query:{url:r.url,refresh:!!r.loaded||void 0,outSR:(0,u.oR)(l)?void 0:l.wkid??JSON.stringify(l)},signal:t});return i})()}_hasGeometry(t){return this.featureCollections?.some(r=>r.featureSet?.geometryType===t&&r.featureSet.features?.length>0)??!1}};(0,s._)([(0,_.Cb)()],o.prototype,"description",void 0),(0,s._)([(0,_.Cb)()],o.prototype,"featureCollections",void 0),(0,s._)([(0,D.r)("service","featureCollections",["featureCollection.layers"])],o.prototype,"readFeatureCollections",null),(0,s._)([(0,_.Cb)({type:C.Z,json:{name:"lookAtExtent"}})],o.prototype,"fullExtent",void 0),(0,s._)([(0,_.Cb)(n.id)],o.prototype,"id",void 0),(0,s._)([(0,_.Cb)(n.rn)],o.prototype,"legendEnabled",void 0),(0,s._)([(0,_.Cb)({types:A,json:{write:!0}})],o.prototype,"lineSymbol",void 0),(0,s._)([(0,_.Cb)({type:["show","hide"]})],o.prototype,"listMode",void 0),(0,s._)([(0,_.Cb)({types:B,json:{write:!0}})],o.prototype,"pointSymbol",void 0),(0,s._)([(0,_.Cb)({types:K,json:{write:!0}})],o.prototype,"polygonSymbol",void 0),(0,s._)([(0,_.Cb)({type:["GeoRSS"]})],o.prototype,"operationalLayerType",void 0),(0,s._)([(0,_.Cb)(n.HQ)],o.prototype,"url",void 0),(0,s._)([(0,_.Cb)({json:{origins:{service:{read:{source:"name",reader:t=>t||void 0}}}}})],o.prototype,"title",null),(0,s._)([(0,_.Cb)({readOnly:!0,json:{read:!1},value:"geo-rss"})],o.prototype,"type",void 0),o=(0,s._)([(0,v.j)("esri.layers.GeoRSSLayer")],o);const W=o}}]);